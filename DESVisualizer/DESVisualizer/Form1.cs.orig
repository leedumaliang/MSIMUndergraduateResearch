using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace DESVisualizer
{
    public partial class Form1 : Form
    {
        List<EventDisplay> displayEventList;
        //DataTable displayEventTable;
        //DataColumn column;
        //DataRow row;
        //DataTable theDisplay;
        //BindingSource bindingSourceTable1;
        //DataGridView dataGridViewTable = new DataGridView();

        public Form1()
        {
            InitializeComponent();
            //DrawIt(0);
            graphics = this.CreateGraphics();
            this.Paint += new PaintEventHandler(pictureBox1_Paint);
            eventList = new List<Event>();
            arcList = new List<Arc>();
            textBox1.KeyDown += textBox1_Enter;
            textBox2.KeyDown += textBox2_Enter;
<<<<<<< Updated upstream
=======

        }
>>>>>>> Stashed changes


            //displayEventTable = new DataTable();
            //bindingSourceTable1 = new BindingSource();
            //column = new DataColumn();
            //column.DataType = Type.GetType("System.String");
            //column.ColumnName = "Event";
            //displayEventTable.Columns.Add(column);

            //column = new DataColumn();
            //column.DataType = Type.GetType("System.String");
            //column.ColumnName = "Time";
            //displayEventTable.Columns.Add(column);

            //bindingSourceTable1.DataSource = displayEventTable;


            displayEventList = new List<EventDisplay>();
            displayEventList.Add(new EventDisplay("No Events Yet", "No Times Yet"));
            eventDisplayBindingSource.DataSource = displayEventList;
            //bindingSource1 = new BindingSource();
            //bindingSource1.DataSource = displayEventList;
            //textBox4.DataBindings.Add("Text", bindingSource1, "Name");
            //textBox3.DataBindings.Add("Text", bindingSource1, "Time");

            //dataGridViewTable.AutoGenerateColumns = true;
            //dataGridViewTable.AutoSize = true;
            //dataGridViewTable.DataSource = bindingSourceTable1;

            
        }
        
        private System.Drawing.Graphics graphics;
        private StreamReader sr = new StreamReader("event_net_list.txt");
        private StreamReader input = new StreamReader("input_file.txt");
        private List<Event> eventList;
        private List<Arc> arcList;
        int highlightedEvent = -1;
        int highlightedArc = -1;

        //List<EventDisplay> displayEventList;
        
        //BindingSource bindingSource1;

        //private void drawArc(int current, int next)
        //{
        //    Rectangle rect = new Rectangle(25 + (current * 100), 35 - (next * 10), 100 + (next * 100), 35 + (next * 10));
        //    Pen blackPen = new Pen(Color.Black, 3);

        //    // Create start and sweep angles on ellipse.
        //    float startAngle = 0.0F;
        //    float sweepAngle = -180.0F;

        //    // Draw arc to screen.
        //    graphics.DrawArc(blackPen, rect, startAngle, sweepAngle);

        //}

        private void pictureBox1_Paint(object sender, PaintEventArgs e)
        {
            e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
            //drawArc(0);
            //drawArc(1, 0);
            //drawArc(0, 1);
            Point point1 = new Point(200, 200);
            Point point2 = new Point(250, 150);
            Point point3 = new Point(350, 150);
            Point point4 = new Point(400, 200);
            Pen redPen = new Pen(Color.Red, 3);
            Pen greenPen = new Pen(Color.Green, 3);
            Point[] curvePoints = { point1, point2, point3, point4};
            //e.Graphics.DrawLines(redPen, curvePoints);
            e.Graphics.DrawBezier(greenPen, point1, point2, point3, point4);

        }

        private void Form1_Load_1(object sender, EventArgs e)
        {
            System.Diagnostics.Debug.WriteLine("Form Load");

        }

        private void DrawEvents_Click(object sender, EventArgs e)
        {
            foreach (Event ev in eventList)
            {
                ev.DrawEvent(graphics);
            }
            foreach (Arc arc in arcList)
            {
                arc.DrawArc(graphics);
            }
        }

        private void ImportButton_Click(object sender, EventArgs e)
        {
            int edgeCount = 0;
            while (sr.Peek() >= 0)
            {
                string ev = sr.ReadLine();
                int eventName = ev[0] - '0';
                List<int> eventEdges = new List<int>();
                //Console.Write((char)eventName);
                for (int i = 0; i < ev.Length / 2; i++)
                {
                    eventEdges.Add(edgeCount++);
                    int edge = (int)char.GetNumericValue(ev[i * 2 + 2]);
                    arcList.Add(new Arc(eventName, edge));
                    //eventEdges.Add((int)Char.GetNumericValue(ev[i * 2 + 2]));
                }
                //foreach(int _edge in eventEdges)
                //{
                //    Console.WriteLine((int)_edge);
                //}
                //Console.WriteLine();
                eventList.Add(new Event(eventName, eventEdges));
            }
        }

        private void textBox1_Enter(object sender, KeyEventArgs e)
        {
            int textboxValue;
            if (int.TryParse(textBox1.Text, out textboxValue) && e.KeyCode == Keys.Enter)
            {
                if (Enumerable.Range(1, eventList.Count()).Contains(textboxValue))
                {
                    if (highlightedEvent != -1)
                        eventList.ElementAt(highlightedEvent).HighlightEvent(graphics, false);
                    highlightedEvent = int.Parse(textBox1.Text) - 1;

                    e.Handled = true;
                    e.SuppressKeyPress = true;
                }
            }
        }

        private void textBox2_Enter(object sender, KeyEventArgs e)
        {
            int textboxValue;
            if (int.TryParse(textBox2.Text, out textboxValue) && e.KeyCode == Keys.Enter)
            {
                if (Enumerable.Range(1, arcList.Count()).Contains(textboxValue))
                {
                    if (highlightedArc != -1)
                        arcList.ElementAt(highlightedArc).HighlightArc(graphics, false);
                    highlightedArc = int.Parse(textBox2.Text) - 1;
                    arcList.ElementAt(highlightedArc).HighlightArc(graphics, true);
                    eventList.ElementAt(highlightedEvent).HighlightEvent(graphics, true);

                    e.Handled = true;
                    e.SuppressKeyPress = true;
                }
            }

        }

        private void nextButton_Click(object sender, EventArgs e)
        {
            if (input.Peek() >= 0)
            {
                string ev = input.ReadLine();
                int inputType = ev[0] - '0';
                int modifiedElement = ev[2] - '0';
                if (inputType == 0)
                {
                    if (Enumerable.Range(1, eventList.Count()).Contains(modifiedElement))
                    {
                        if (highlightedArc != -1)
                        {
                            arcList.ElementAt(highlightedArc).HighlightArc(graphics, false);
                            highlightedArc = -1;
                        }

                        if (highlightedEvent != -1)
                            eventList.ElementAt(highlightedEvent).HighlightEvent(graphics, false);
                        highlightedEvent = modifiedElement - 1;
                        eventList.ElementAt(highlightedEvent).HighlightEvent(graphics, true);

                        if (displayEventList.Count > 0)
                        {
                            displayEventList.RemoveAt(0);

                            eventDisplayBindingSource.ResetBindings(false);
                        }

                    }

                }
                else if (inputType == 1)
                {
                    if (Enumerable.Range(1, arcList.Count()).Contains(modifiedElement ))
                    {
                        if (highlightedArc != -1)
                            arcList.ElementAt(highlightedArc).HighlightArc(graphics, false);

                        if (highlightedEvent != -1)
                        {
                            highlightedArc = eventList.ElementAt(highlightedEvent).getNextArc(arcList, modifiedElement);
                            string eventToDisplay = "1";
                            if (highlightedArc==0)
                            {
                                eventToDisplay = "2";
                           
                            }
                            else if (highlightedArc==2)
                            {
                                eventToDisplay = "3";
                            }
                            arcList.ElementAt(highlightedArc).HighlightArc(graphics, true);
                            displayEventList.Add(new EventDisplay(eventToDisplay, "Don't know yet"));
                            eventDisplayBindingSource.ResetBindings(false);


                  


                        }

                        else
                        {

                        }
                    }
                }
                else
                {

                }
            }
        }



        private void label1_Click(object sender, EventArgs e)
        {

        }

        public DataTable TransposeDataTable(DataTable dt)
        {
            DataTable transposedTable = new DataTable();

            DataColumn firstColumn = new DataColumn(dt.Columns[0].ColumnName);
            transposedTable.Columns.Add(firstColumn);

            //Add a column for each row in first data table
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataColumn dc = new DataColumn(dt.Rows[i][0].ToString());
                transposedTable.Columns.Add(dc);
            }

            for (int j = 1; j < dt.Columns.Count; j++)
            {
                DataRow dr = transposedTable.NewRow();
                dr[0] = dt.Columns[j].ColumnName;

                for (int k = 0; k < dt.Rows.Count; k++)
                {
                    dr[k + 1] = dt.Rows[k][j];
                }

                transposedTable.Rows.Add(dr);
            }

            return transposedTable;
        }
    }
}

public class Event
{
    public Event(int _id, List<int> _edges) 
    {
        Console.WriteLine();
        Console.Write(_id);
        id = _id;
        edges = new List<int>();
        edges = _edges;
        location = id * 200;
        size = 100;
    }
    public void DrawEvent(Graphics graphics)
    {
        Console.Write((string)"Drawing Event");
        System.Drawing.Rectangle rectangle = new System.Drawing.Rectangle(
            (location), 100, size, size);
        graphics.DrawEllipse(System.Drawing.Pens.Black, rectangle);
        //graphics.DrawRectangle(System.Drawing.Pens.Black, rectangle);
        graphics.DrawString(id.ToString(), drawFont, drawBrush, location + 40, 137, drawFormat);
    }
    //public void DrawEdges(Graphics graphics)
    //{
    //    Console.Write((string)"Drawing Edges");
    //    foreach ( edge in edges)
    //    {
    //        edge.
    //    }
    //}
    public void HighlightEvent(System.Drawing.Graphics graphics, bool highlighted)
    {
        System.Drawing.Rectangle rectangle = new System.Drawing.Rectangle(
            (location), 100, size, size);
        if (highlighted == true)
            graphics.DrawEllipse(System.Drawing.Pens.Yellow, rectangle);
        else
            graphics.DrawEllipse(System.Drawing.Pens.Black, rectangle);
    }
    
    public int getNextArc(List<Arc> arcList, int nextEvent)
    {
        foreach (int edge in edges)
        {
            if (arcList.ElementAt(edge).next == nextEvent)
                return edge;
        }
        return -1;
    }
    public int id { get; }
    private List<int> edges;
    private int location;
    private int size;
    private System.Drawing.Font drawFont = new System.Drawing.Font("Arial", 16);
    private System.Drawing.SolidBrush drawBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Black);
    private System.Drawing.StringFormat drawFormat = new System.Drawing.StringFormat();


}

public class Arc
{
    public static int nextID = 1;
    public Arc(int _current, int _next)
    {
        id = nextID++;
        //current = _current;
        //next = _next;
        current = _current;
        next = _next;
        difference = next - current;
    }
    public void DrawArc(System.Drawing.Graphics graphics)
    {
        //int height = 35 + (int)(Math.Pow(10, difference));
        int height = difference * 50;
        Pen blackPen = new Pen(Color.Black, 1);
        Rectangle rect;
        if (height > 0)
        {

            rect = new Rectangle(50 + (current * 200), 100 - height / 2, difference * 200, height);
            float startAngle = 0.0F;
            float sweepAngle = -180.0F;
            graphics.DrawArc(blackPen, rect, startAngle, sweepAngle);
            //graphics.DrawRectangle(blackPen, rect);
        }
        else
        {
            rect = new Rectangle(50 + (next * 200), 200 + height / 2, difference * -200, height * -1);
            float startAngle = 0.0F;
            float sweepAngle = 180.0F;
            graphics.DrawArc(blackPen, rect, startAngle, sweepAngle);
            //graphics.DrawRectangle(blackPen, rect);
        }
    }
    public void HighlightArc(System.Drawing.Graphics graphics, bool highlighted)
    {
        Pen pen;
        Rectangle rect;
        int height = difference * 50;
        if (highlighted == true)
            pen = new Pen(Color.Yellow, 1);
        else
            pen = new Pen(Color.Black, 1);
        if (height > 0)
        {
            rect = new Rectangle(50 + (current * 200), 100 - height / 2, difference * 200, height);
            float startAngle = 0.0F;
            float sweepAngle = -180.0F;
            graphics.DrawArc(pen, rect, startAngle, sweepAngle);
        }
        else
        {
            rect = new Rectangle(50 + (next * 200), 200 + height / 2, difference * -200, height * -1);
            float startAngle = 0.0F;
            float sweepAngle = 180.0F;
            graphics.DrawArc(pen, rect, startAngle, sweepAngle);
        }
    }
    public int id { get; set; }
    public int current { get; }
    public int next { get; }
    private int difference;
}

public class EventDisplay
{
    private string eventName;
    public string Event
    {
        get { return eventName; }
    }

    private string eventTime;
    public string Time
    {
        get { return eventTime; }
    }

    public EventDisplay (string name, string time)
    {
        eventName = name;
        eventTime = time;
    }







}

